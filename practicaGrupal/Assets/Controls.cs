//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""MoveCube"",
            ""id"": ""fc971f07-0925-40e2-9ac0-b17a95b2e698"",
            ""actions"": [
                {
                    ""name"": ""CameraController"",
                    ""type"": ""Value"",
                    ""id"": ""7543962d-9d9e-44cc-aa83-f9eadf288838"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b15dfa02-33f1-47a8-803d-eac7ccb8066a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8680091c-8905-406c-aa2b-bcfa27f1a91a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e44e0a0c-1222-48ac-aaf3-d542be10feb8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveCube
        m_MoveCube = asset.FindActionMap("MoveCube", throwIfNotFound: true);
        m_MoveCube_CameraController = m_MoveCube.FindAction("CameraController", throwIfNotFound: true);
        m_MoveCube_Shoot = m_MoveCube.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveCube
    private readonly InputActionMap m_MoveCube;
    private IMoveCubeActions m_MoveCubeActionsCallbackInterface;
    private readonly InputAction m_MoveCube_CameraController;
    private readonly InputAction m_MoveCube_Shoot;
    public struct MoveCubeActions
    {
        private @Controls m_Wrapper;
        public MoveCubeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraController => m_Wrapper.m_MoveCube_CameraController;
        public InputAction @Shoot => m_Wrapper.m_MoveCube_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_MoveCube; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveCubeActions set) { return set.Get(); }
        public void SetCallbacks(IMoveCubeActions instance)
        {
            if (m_Wrapper.m_MoveCubeActionsCallbackInterface != null)
            {
                @CameraController.started -= m_Wrapper.m_MoveCubeActionsCallbackInterface.OnCameraController;
                @CameraController.performed -= m_Wrapper.m_MoveCubeActionsCallbackInterface.OnCameraController;
                @CameraController.canceled -= m_Wrapper.m_MoveCubeActionsCallbackInterface.OnCameraController;
                @Shoot.started -= m_Wrapper.m_MoveCubeActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_MoveCubeActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_MoveCubeActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_MoveCubeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraController.started += instance.OnCameraController;
                @CameraController.performed += instance.OnCameraController;
                @CameraController.canceled += instance.OnCameraController;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public MoveCubeActions @MoveCube => new MoveCubeActions(this);
    public interface IMoveCubeActions
    {
        void OnCameraController(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
